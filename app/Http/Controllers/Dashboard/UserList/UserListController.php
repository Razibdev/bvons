<?php

namespace App\Http\Controllers\Dashboard\UserList;


use App\Exports\UserPhoneExport;
use App\Http\Controllers\Controller;
use App\Model\Area\District;
use App\Model\Area\Thana;
use App\Model\Area\Village;
use App\Model\Area\Zone;
use App\Model\Transaction\Transaction;
use App\Model\User\UserVerification;
use App\Model\User\UserVerificationDetail;
use App\User;
use App\UserJob;
use App\UserJobType;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;
use Kreait\Firebase\Storage;
use Maatwebsite\Excel\Facades\Excel;
use Yajra\DataTables\DataTables;

class UserListController extends Controller
{
    public function index()
    {
        /*$users = User::latest()->get();
        return view('dashboard.user-list.index', compact('users'));*/
        return view('dashboard.user-list.index');
    }


    public function bvonUserPhoneExcel(){
        return Excel::download(new UserPhoneExport, 'invoices.xlsx');
    }

    public function userActionBonus(Request $request){
        User::where('id', $request->id)->update(['action_active' => $request->value]);
        return $request->id;
    }





    public function userDatatables(Request $request)
    {
        DB::statement(DB::raw('set @rownum=0'));
        $users = User::select([
            DB::raw('@rownum  := @rownum  + 1 AS rownum'),
            'id',
            'name',
            'phone',
            'type',
            'referral_id',
            'dealer_referral_id',
            'dealer_referral_by',
            'action_active'
        ]);



        $datatables = Datatables::of($users)
            ->addColumn('action', function ($user) {
                if($user->action_active){
                    $checked = "checked";
                }else{
                    $checked ='sdfasda';
                }
                return ' <input type="text" name="quantity" class="dbaccount" data-id="'.$user->id.'" value="'.$user->dealer_referral_id.'" > &nbsp;<a href="'. route('bf.user.details', ['user' => $user->id]) .'" class="btn btn-alt-primary cu-popover" data-content="See Details" data-placement="top">
                                        <i class="si si-info"></i>
                                    </a> &nbsp; <input type="text" name="dbaccountby" class="dbaccountBy" data-id="'.$user->id.'" value="'.$user->dealer_referral_by.'" >  <input type="checkbox" name="actionActive" class="actionActive" data-id="'.$user->id.'" '.$checked.' value="1" >';

            });



        if ($keyword = $request->get('search')['value']) {
            $datatables->filterColumn('rownum', function($value) {});
        }

        return $datatables->make(true);
    }




    public function show(User $user)
    {
        return view('dashboard.user-list.details', compact('user'));
    }

    public function updateUserDetails(Request $request){
      if($request->isMethod('post'))  {
          $data = $request->all();
            User::where('id', $data['id'])->update(['name'=> $data['name'], 'phone' => $data['phone'], 'nick_name' => $data['nick_name'], 'gender'=> $data['gender'],'birthday'=> $data['birthday'], 'hometown' => $data['hometown'], 'lives_in' => $data['lives_in'], 'religion' => $data['religion'], 'occupation' => $data['occupation']]);
          return redirect()->back();
      }
    }




    public function assign_job()
    {
        $user_job_types = UserJobType::all();
        $premium_user = User::where('verified', 1)->where('referral_id', '!=', null)->where('type', '!=', 'GU')->get();
        $users = $premium_user->filter(function($user){
            return $user->job == null;
        });
        $zones = Zone::all();

        $business_developers = $premium_user->filter(function($user){
            return $user->has_job() && $user->job->job_type->name === "B-Developer";
        });


        return view('dashboard.user-list.assign_job', compact('user_job_types', 'users', 'zones', 'business_developers'));
    }
    public function assign_job_store(Request $request)
    {

        if($request->query('assign_job') === 'B-Developer') {
            if(User::find($request->user_id)->has_job()) return back()->with(["error" => "already assigned a job to this user"]);
            $success = UserJob::create([
                "user_id" => $request->user_id,
                "user_job_type_id" => $request->job_type,
                "area_type" => null,
                "area_id" => null,
            ]);
        } else if($request->query('assign_job') === 'Divisional Manager') {
            $success = Zone::find($request->area)->area()->create([
                "user_id" => $request->user_id,
                "user_job_type_id" => $request->job_type,
            ]);
        } else if($request->query('assign_job') === 'District Manager') {
            $success = District::find($request->area)->area()->create([
                "user_id" => $request->user_id,
                "user_job_type_id" => $request->job_type,
            ]);
        } else if($request->query('assign_job') === 'Area Manager') {
            $success = Thana::find($request->area)->area()->create([
                "user_id" => $request->user_id,
                "user_job_type_id" => $request->job_type,
            ]);
        } else if($request->query('assign_job') === 'Brand Promoter') {
            $success = Village::find($request->area)->area()->create([
                "user_id" => $request->user_id,
                "user_job_type_id" => $request->job_type,
            ]);
        }

        if($success) return back()->with(["success" => "Job has been assigned successfully"]);

    }

    public function job_list()
    {
        $job_list = UserJob::orderBy('user_job_type_id', 'asc');

        if($area_id = request()->query('village_id')) {
            $area = Village::findOrFail($area_id);
            $job_list = $area->area();
        } else if($area_id = request()->query('thana_id')) {
            $area = Thana::findOrFail($area_id);
            $job_list = $area->area();
        } else if($area_id = request()->query('district_id')) {
            $area = District::findOrFail($area_id);
            $job_list = $area->area();
        } else if($area_id = request()->query('zone_id')) {
            $area = Zone::findOrFail($area_id);
            $job_list = $area->area();
        }

        if($job_type_id = request()->query('user_job_type_id')) {
            $job_list = $job_list->where('user_job_type_id', $job_type_id);
        }



        $job_list = $job_list->orderBy('user_job_type_id', 'asc')->get();




        $zones = Zone::all();
        $job_types = UserJobType::all();
        return view('dashboard.user-list.job_list', compact('job_list', 'zones', 'job_types'));
    }

    public function changePassword(User $user, Request $request)
    {
        $request->validate([
            'password' => 'required|confirmed|min:6'
        ]);
        $updated = $user->update([
            "password" => bcrypt($request->password)
        ]);

        if($updated) return back()->with(["success" => "Password has been change successfully"]);
    }


    public function addOrMinusBalance(Request $request){

        if ($request->isMethod('post')){
            $data = $request->all();
            if(empty($data['mesage'])){
                $data['mesage'] = '';
            }
            if(!empty($data['balance_add'])){
                $transaction = new Transaction();
                $transaction->user_id = $data['user_id'];
                $transaction->category = 'admin_user_balance';
                $transaction->amount_type = "c";
                $transaction->amount = $data['balance'];
                $transaction->message = $data['message'];
                $transaction->data = '';
                $transaction->check_date = date('Y-m-d');
                $transaction->save();
                return redirect()->back();
            }else{
                $transaction = new Transaction();
                $transaction->user_id = $data['user_id'];
                $transaction->category = 'admin_user_balance';
                $transaction->amount_type = "d";
                $transaction->amount = $data['balance'];
                $transaction->message = $data['message'];
                $transaction->data = '';
                $transaction->check_date = date('Y-m-d');
                $transaction->save();
                return redirect()->back();

            }

        }
    }





    public function treeView()
    {
        $users = User::paginate(10);

        return view('dashboard.user-list.tree-view', compact('users'));
    }

    public function create()
    {
        $premium_users = User::whereNotNull('referral_id')->get();
        return view('dashboard.user-list.create', compact('premium_users'));
    }

    public function store(Request $request)
    {
        $request->validate([
           "name" => "required|min:3",
           "phone" => "required|unique:users|min:10",
           "password" => "required|confirmed",
           "password_confirmation" => "required",
           "device_id" => "required",
           "referred_by" => "required",
        ]);

        $user = User::create([
            "name" => $request->name,
            "uuid" => Str::uuid(),
            "fuuid" => Str::uuid(),
            "phone" => $request->phone,
            "password" => Hash::make($request->password),
            "device_id" => $request->device_id,
            "referred_by" => $request->referred_by,
        ]);

        $profile_pic = "";
        $cover_pic = "";

        $user->profile_pic = \Upload::storeMediaFromBase64($profile_pic, 'user_profile', "/{$user->id}")[0];
        $user->cover_pic = \Upload::storeMediaFromBase64($cover_pic, 'user_cover', "/{$user->id}")[0];

        $user->save();
        UserVerificationDetail::create([
            "user_id" => $user->id,
            "email" => $user->uuid . "@mail.com",
            "education" => "SSC",
            "board" => "Dhaka",
            "roll" => "11111",
            "reg_num" => "11111",
            "group" => "Dhaka",
            "year" => date('Y'),
        ]);

        UserVerification::create([
            "user_id" => $user->id,
            "payment_method" => "Direct Payment",
            "transaction_id" => "created-by-admin",
        ]);


        return back()->with(["success" => "User has been created successfully"]);
    }

    public function changeReferredBy(User $user, Request $request)
    {
        $request->validate([
            'referred_by' => 'required'
        ]);
        $updated = $user->update([
            "referred_by" => $request->referred_by
        ]);

        if($updated) return back()->with(["success" => "Referred By User has been change"]);
    }
}
